
// THIS FILE IS AUTOGENERATED
// Generated on "2019-6-1 14:38:37"

export interface RGBColor {
    r: number,
    g: number,
    a: number
  }
  
  export interface Vector3f {
    x: number,
    y: number,
    z: number
  }
  
  declare module "alt" {
  
    export class Entity extends WorldObject {
      id: number;
      model: number;
      rot: Vector3f;
  
      getSyncedMeta(key: string): any;
      setSyncedMeta(key: string, value: any): void;
    }
  
    export class WorldObject extends BaseObject {
      dimension: number;
      pos: Vector3f;
  
    }
  
    export class BaseObject {
      type: number;
  
      getMeta(key: string): any;
      setMeta(key: string, p1: any): void;
    }
  
    export class Player extends Entity {
      health: number;
      name: string;
      ping: number;
      seat: number;
      vehicle: Vehicle;
  
      giveWeapon(weaponHash: number, ammo: number, equipNow: boolean): void;
      kick(): void;
      removeAllWeapons(): void;
      removeWeapon(weaponHash: number): void;
      setDateTime(day: number, month: number, year: number, hour: number, minute: number, second: number): void;
      setWeather(weather: number): void;
      spawn(x: number, y: number, z: number, delay: number): void;
    }
  
    export class Vehicle extends Entity {
      activeRadioStation: number;
      bodyAdditionalHealth: number;
      bodyHealth: number;
      customPrimaryColor: RGBColor;
      customSecondaryColor: RGBColor;
      customTires: boolean;
      darkness: number;
      dashboardColor: number;
      daylightOn: boolean;
      dirtLevel: number;
      driver: Player;
      engineHealth: number;
      engineOn: boolean;
      flamethrowerActive: boolean;
      handbrakeActive: boolean;
      hasArmoredWindows: number;
      headlightColor: number;
      interiorColor: number;
      lockState: number;
      manualEngineControl: boolean;
      modKit: number;
      modKitsCount: number;
      neon: Object;
      neonColor: Object;
      nightlightOn: boolean;
      numberPlateIndex: number;
      numberPlateText: string;
      pearlColor: number;
      petrolTankHealth: number;
      primaryColor: number;
      repairsCount: number;
      roofOpened: boolean;
      secondaryColor: number;
      sirenActive: boolean;
      tireSmokeColor: Object;
      wheelColor: number;
      wheelsCount: number;
      windowTint: number;
  
      doesWheelHasTire(wheelId: number): number;
      getAppearanceDataBase64(): string;
      getArmoredWindowHealth(windowId: number): number;
      getArmoredWindowShootCount(windowId: number): number;
      getBumperDamageLevel(part: number): number;
      getDamageStatusBase64(): string;
      getDoorState(doorId: number): number;
      getGamestateDataBase64(): string;
      getHealthDataBase64(): string;
      getModsCount(category: number): number;
      getPartBulletHoles(part: number): number;
      getPartDamageLevel(part: number): number;
      getScriptDataBase64(): string;
      getWheelHealth(wheelId: number): number;
      isLightDamaged(lightId: number): boolean;
      isSpecialLightDamaged(specialLightId: number): boolean;
      isWheelBurst(wheelId: number): number;
      isWindowDamaged(windowId: number): boolean;
      isWindowOpened(windowId: number): boolean;
      setAppearanceDataBase64(appearanceData: string): void;
      setArmoredWindowHealth(windowId: number, health: number): void;
      setArmoredWindowShootCount(windowId: number, shootCount: number): void;
      setBumperDamageLevel(bumperId: number, damageLevel: number): void;
      setDamageStatusBase64(damageStatus: string): void;
      setDoorState(doorId: number, state: number): void;
      setExtra(category: number, state: boolean): void;
      setGamestateDataBase64(gamestateData: string): void;
      setHealthDataBase64(healthData: string): void;
      setLightDamaged(lightId: number, damaged: boolean): void;
      setMod(category: number, id: number): void;
      setPartBulletHoles(partId: number, holesCount: number): void;
      setPartDamageLevel(partId: number, damageLevel: number): void;
      setScriptDataBase64(scriptData: string): void;
      setSpecialLightDamaged(specLightId: number, damaged: boolean): void;
      setWheelBurst(wheelId: number, burst: boolean): void;
      setWheelHasTire(wheelId: number, hasTire: boolean): void;
      setWheelHealth(wheelId: number, health: number): void;
      setWheels(category: number, rimId: number): void;
      setWindowDamaged(windowId: number, damaged: boolean): void;
      setWindowOpened(windowId: number, opened: boolean): void;
    }
  
    export class Blip extends WorldObject {
  
    }
  
    export class Checkpoint extends WorldObject {
  
    }
  
    export class VoiceChannel extends BaseObject {
  
      addPlayer(targetEntity: Player): void;
      isPlayerInChannel(targetEntity: Player): boolean;
      isPlayerMuted(targetEntity: Player): boolean;
      mutePlayer(targetEntity: Player): void;
      removePlayer(targetEntity: Player): void;
      unmutePlayer(targetEntity: Player): void;
    }
  
    var currentResource: string;
    var players: Array<Player>;
    var rootDir: string;
    var vehicles: Array<Vehicle>;
  
    export function createBlipForCoords(type: number, x: number, y: number, z: number): Blip;
    export function createCheckpoint(type: number, x: number, y: number, z: number, radius: number, height: number, r: number, g: number, b: number, a: number): Checkpoint;
    export function createVehicle(model: string|number|number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number): Vehicle;
    export function createVoiceChannel(isSpatial: boolean, maxDistance: number): VoiceChannel;
    export function emit(evName: string, ...args: any[]): void;
    export function emitClient(v8Player: Player, evName: string, ...args: any[]): void;
    export function getPlayersByName(name: string): Array<any>;
    export function getResourceExports(name: string): any;
    export function getResourceMain(name: string): string;
    export function getResourcePath(name: string): string;
    export function hasResource(name: string): boolean;
    export function log(...str: string[]): void;
    export function logError(...str: string[]): void;
    export function logWarning(...str: string[]): void;
  
    export function on(event: 'playerConnect', callback: (player: Player) => boolean ): void;
    export function on(event: 'playerDisconnect', callback: (player: Player, reason: string) => void ): void;
    export function on(event: 'playerDamage', callback: (player: Player, attacker: Entity, damage: number, weapon: number) => boolean ): void;
    export function on(event: 'playerDeath', callback: (player: Player, killer: Entity, weapon: number) => void ): void;
    export function on(event: 'entityEnterCheckpoint'|'entityLeaveCheckpoint', callback: (entity: Entity, checkpoint: Checkpoint) => void ): void;
    export function on(event: 'playerEnteredVehicle', callback: (player: Player, targetVehicle: Vehicle, seat: number) => void ): void;
    export function on(event: 'playerLeftVehicle', callback: (player: Player, targetVehicle: Vehicle, seat: number) => void ): void;
    export function on(event: 'playerChangedVehicleSeat', callback: (player: Player, targetVehicle: Vehicle, oldSeat: number, newSeat: number) => void ): void;
    export function on(event: 'removeEntity', callback: (entity: Entity) => void ): void;
    export function on(event: 'consoleCommand', callback: (...args: Array<string>) => void ): void;
    export function onClient(evName: string, callback: Function): void;
    export function removeEntity(_this: Object): void;
    export function removeVoiceChannel(_this: Object): void;
    export function resourceLoaded(name: string, p1: any): void;
  }
  